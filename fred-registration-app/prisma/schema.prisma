generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Attribute {
  AttributeID     Int               @id(map: "PK__Attribut__C189298A0C028B60") @default(autoincrement())
  Description     String            @unique(map: "UQ__Attribut__4EBBBAC9975218A7") @db.VarChar(255)
  CourseAttribute CourseAttribute[]
}

model Catalog {
  CatalogID     Int             @id(map: "PK__Catalog__C2513B481B735019") @default(autoincrement())
  TermID        Int
  ProgramID     Int
  Program       Program         @relation(fields: [ProgramID], references: [ProgramID], onUpdate: NoAction, map: "FK__Catalog__Program__160F4887")
  Term          Term            @relation(fields: [TermID], references: [TermID], onUpdate: NoAction, map: "FK__Catalog__TermID__151B244E")
  CourseCatalog CourseCatalog[]

  @@unique([TermID, ProgramID], map: "UC_Catalog_TermProgram")
}

model Course {
  CRN                                                           Int                   @id(map: "PK__Course__C1F887FF87A56FAF")
  CourseCode                                                    String                @db.VarChar(64)
  Title                                                         String                @db.VarChar(256)
  Credits                                                       Int
  Level                                                         String                @db.VarChar(64)
  DepartmentID                                                  Int
  Department                                                    Department            @relation(fields: [DepartmentID], references: [DepartmentID], onUpdate: NoAction, map: "FK__Course__Departme__6A30C649")
  CourseAttribute                                               CourseAttribute[]
  CourseCatalog                                                 CourseCatalog[]
  CourseCorequisite_CourseCorequisite_CourseCRNToCourse         CourseCorequisite[]   @relation("CourseCorequisite_CourseCRNToCourse")
  CourseCorequisite_CourseCorequisite_CorequisiteCRNToCourse    CourseCorequisite[]   @relation("CourseCorequisite_CorequisiteCRNToCourse")
  CourseFee                                                     CourseFee[]
  CoursePrerequisite_CoursePrerequisite_CourseCRNToCourse       CoursePrerequisite[]  @relation("CoursePrerequisite_CourseCRNToCourse")
  CoursePrerequisite_CoursePrerequisite_PrerequisiteCRNToCourse CoursePrerequisite[]  @relation("CoursePrerequisite_PrerequisiteCRNToCourse")
  CourseRestriction                                             CourseRestriction[]
  StudentRegistration                                           StudentRegistration[]
}

model CourseAttribute {
  CRN         Int
  AttributeID Int
  Attribute   Attribute @relation(fields: [AttributeID], references: [AttributeID], onDelete: Cascade, onUpdate: NoAction, map: "FK__CourseAtt__Attri__75A278F5")
  Course      Course    @relation(fields: [CRN], references: [CRN], onDelete: Cascade, onUpdate: NoAction, map: "FK__CourseAttri__CRN__74AE54BC")

  @@id([CRN, AttributeID], map: "PK__CourseAt__7DE015676FB15F89")
}

model CourseCatalog {
  CRN                 Int
  CatalogID           Int
  RecommendedSemester String? @db.VarChar(10)
  RecommendedYear     Int?
  Catalog             Catalog @relation(fields: [CatalogID], references: [CatalogID], onUpdate: NoAction, map: "FK__CourseCat__Catal__19DFD96B")
  Course              Course  @relation(fields: [CRN], references: [CRN], onUpdate: NoAction, map: "FK__CourseCatal__CRN__18EBB532")

  @@id([CRN, CatalogID], map: "PK__CourseCa__5DDD944B0F12FFFC")
}

model CourseCorequisite {
  CourseCRN                                       Int
  CorequisiteCRN                                  Int
  Course_CourseCorequisite_CourseCRNToCourse      Course @relation("CourseCorequisite_CourseCRNToCourse", fields: [CourseCRN], references: [CRN], onUpdate: NoAction, map: "FK__CourseCor__Cours__02FC7413")
  Course_CourseCorequisite_CorequisiteCRNToCourse Course @relation("CourseCorequisite_CorequisiteCRNToCourse", fields: [CorequisiteCRN], references: [CRN], onUpdate: NoAction, map: "FK__CourseCor__Coreq__03F0984C")

  @@id([CourseCRN, CorequisiteCRN], map: "PK__CourseCo__875F7789A854F723")
}

model CourseFee {
  CRN    Int
  FeeID  Int
  Course Course @relation(fields: [CRN], references: [CRN], onDelete: Cascade, onUpdate: NoAction, map: "FK__CourseFee__CRN__6D0D32F4")
  Fee    Fee    @relation(fields: [FeeID], references: [FeeID], onDelete: Cascade, onUpdate: NoAction, map: "FK__CourseFee__FeeID__6E01572D")

  @@id([CRN, FeeID], map: "PK__CourseFe__4AC0FCDFA17FE39E")
}

model CoursePrerequisite {
  CourseCRN                                         Int
  PrerequisiteCRN                                   Int
  Course_CoursePrerequisite_CourseCRNToCourse       Course @relation("CoursePrerequisite_CourseCRNToCourse", fields: [CourseCRN], references: [CRN], onUpdate: NoAction, map: "FK__CoursePre__Cours__7F2BE32F")
  Course_CoursePrerequisite_PrerequisiteCRNToCourse Course @relation("CoursePrerequisite_PrerequisiteCRNToCourse", fields: [PrerequisiteCRN], references: [CRN], onUpdate: NoAction, map: "FK__CoursePre__Prere__00200768")

  @@id([CourseCRN, PrerequisiteCRN], map: "PK__CoursePr__5438AF5FEB3C4E59")
}

model CourseRestriction {
  CRN           Int
  RestrictionID Int
  Course        Course      @relation(fields: [CRN], references: [CRN], onDelete: Cascade, onUpdate: NoAction, map: "FK__CourseRestr__CRN__70DDC3D8")
  Restriction   Restriction @relation(fields: [RestrictionID], references: [RestrictionID], onDelete: Cascade, onUpdate: NoAction, map: "FK__CourseRes__Restr__71D1E811")

  @@id([CRN, RestrictionID], map: "PK__CourseRe__74D15F9655301DD5")
}

model CourseSchedule {
  ScheduleID      Int      @id(map: "PK__CourseSc__9C8A5B69611BA44D") @default(autoincrement())
  CRN             Int
  StartDate       DateTime @db.Date
  EndDate         DateTime @db.Date
  Days            String   @db.VarChar(32)
  Time            String   @db.VarChar(32)
  Location        String   @db.VarChar(256)
  InstructorID    Int
  TermID          Int
  Status          String   @db.VarChar(32)
  InstructionMode String   @db.VarChar(32)
}

model Department {
  DepartmentID         Int                    @id(map: "PK__Departme__B2079BCD1A511962") @default(autoincrement())
  Name                 String                 @unique(map: "UQ__Departme__737584F6272E0F21") @db.VarChar(64)
  Course               Course[]
  Instructor           Instructor[]
  InstructorDepartment InstructorDepartment[]
  StudentDepartment    StudentDepartment[]
}

model Fee {
  FeeID       Int         @id(map: "PK__Fee__B387B20974883741") @default(autoincrement())
  Description String      @unique(map: "UQ__Fee__4EBBBAC9D259B552") @db.VarChar(255)
  Amount      Decimal     @db.Decimal(10, 2)
  CourseFee   CourseFee[]
}

model Instructor {
  InstructorID         Int                    @id(map: "PK__Instruct__9D010B7BF79AE6D9") @default(autoincrement())
  UserID               Int                    @unique(map: "UQ__Instruct__1788CCAD08FFA5AE")
  DepartmentID         Int
  Department           Department             @relation(fields: [DepartmentID], references: [DepartmentID], onUpdate: NoAction, map: "FK__Instructo__Depar__5EBF139D")
  User                 User                   @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK_Instructor_User")
  InstructorDepartment InstructorDepartment[]
}

model InstructorDepartment {
  InstructorDepartmentID Int         @id(map: "PK__Instruct__C26B8DCC5425804C") @default(autoincrement())
  DepartmentID           Int?
  InstructorID           Int?
  Department             Department? @relation(fields: [DepartmentID], references: [DepartmentID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Instructo__Depar__0B91BA14")
  Instructor             Instructor? @relation(fields: [InstructorID], references: [InstructorID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Instructo__Instr__0C85DE4D")

  @@unique([InstructorID, DepartmentID], map: "UQ__Instruct__562172C64CF3C74B")
}

model Program {
  ProgramID      Int              @id(map: "PK__Program__752560388944B5DD") @default(autoincrement())
  ProgramName    String           @unique(map: "UQ__Program__4F9257109EC69B0E") @db.VarChar(255)
  DegreeType     String?          @db.VarChar(50)
  ProgramType    String           @db.VarChar(50)
  Catalog        Catalog[]
  StudentProgram StudentProgram[]
}

model Restriction {
  RestrictionID     Int                 @id(map: "PK__Restrict__529D869A4E1E6BBF") @default(autoincrement())
  Description       String              @unique(map: "UQ__Restrict__4EBBBAC994D4E5F3") @db.VarChar(255)
  CourseRestriction CourseRestriction[]
}

model Student {
  StudentID           Int                   @id(map: "PK__Student__32C52A7957B5D885") @default(autoincrement())
  UserID              Int                   @unique(map: "UQ__Student__1788CCAD3A9E625F")
  Level               String                @db.VarChar(64)
  User                User                  @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK_Student_User")
  StudentDepartment   StudentDepartment[]
  StudentProgram      StudentProgram[]
  StudentRegistration StudentRegistration[]
  StudentCGPA         StudentCGPA?
}

model StudentDepartment {
  StudentDepartmentID Int         @id(map: "PK__StudentD__9A6DB1BAEBEE8AC1") @default(autoincrement())
  DepartmentID        Int?
  StudentID           Int?
  Department          Department? @relation(fields: [DepartmentID], references: [DepartmentID], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentDe__Depar__0F624AF8")
  Student             Student?    @relation(fields: [StudentID], references: [StudentID], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentDe__Stude__10566F31")

  @@unique([StudentID, DepartmentID], map: "UQ__StudentD__F9E553C461CBBDF0")
}

model StudentRegistration {
  RegistrationID Int      @id(map: "PK__StudentR__6EF5883000DE9C94") @default(autoincrement())
  StudentID      Int
  CRN            Int
  TermID         Int
  GradeMode      String   @db.VarChar(32)
  Status         String   @default("Registered", map: "DF__StudentRe__Statu__5B438874") @db.VarChar(32)
  Grade          String?  @db.VarChar(32)
  RegisteredOn   DateTime @db.Date
  Course         Course   @relation(fields: [CRN], references: [CRN], onUpdate: NoAction, map: "FK__StudentRegi__CRN__7B5B524B")
  Student        Student  @relation(fields: [StudentID], references: [StudentID], onUpdate: NoAction, map: "FK__StudentRe__Stude__7A672E12")
  Term           Term     @relation(fields: [TermID], references: [TermID], onUpdate: NoAction, map: "FK__StudentRe__TermI__7C4F7684")
}

model Term {
  TermID              Int                   @id(map: "PK__Term__410A2E4508CB8D41") @default(autoincrement())
  Semester            String                @db.VarChar(32)
  Year                Int
  StartDate           DateTime              @db.Date
  EndDate             DateTime              @db.Date
  Catalog             Catalog[]
  StudentRegistration StudentRegistration[]
}

model GradePoints {
  LetterGrade String  @id(map: "PK__GradePoi__BC0CE058853416A1") @db.VarChar(2)
  GradePoint  Decimal @db.Decimal(3, 2)
}

model Role {
  RoleID      Int        @id(map: "PK__Role__8AFACE3A99FEAFDE") @default(autoincrement())
  RoleName    String     @db.VarChar(64)
  Description String?    @db.Text
  UserRole    UserRole[]
}

model User {
  UserID     Int         @id(map: "PK__User__1788CCAC012DAA25")
  FirstName  String      @db.VarChar(64)
  LastName   String      @db.VarChar(64)
  Email      String      @unique(map: "UQ__User__A9D105348045AFE4") @db.VarChar(100)
  Phone      String?     @db.VarChar(20)
  Instructor Instructor?
  Student    Student?
  UserRole   UserRole[]
}

model UserRole {
  UserRoleID Int   @id(map: "PK__UserRole__3D978A55EC8652A0") @default(autoincrement())
  UserID     Int?
  RoleID     Int?
  Role       Role? @relation(fields: [RoleID], references: [RoleID], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserRole_Role")
  User       User? @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK_UserRole_User")

  @@unique([UserID, RoleID], map: "UQ__UserRole__AF27604ECFEBC981")
}

model StudentProgram {
  StudentID Int
  ProgramID Int
  Program   Program @relation(fields: [ProgramID], references: [ProgramID], onUpdate: NoAction, map: "FK_StudentProgram_Program")
  Student   Student @relation(fields: [StudentID], references: [StudentID], onUpdate: NoAction, map: "FK_StudentProgram_Student")

  @@id([StudentID, ProgramID], map: "PK_StudentProgram")
}

view StudentGPA {
  StudentID Int      @unique
  termid    Int
  GPA       Decimal? @db.Decimal(38, 6)
}

view StudentCGPA {
  StudentID Int      @unique
  CGPA      Decimal? @db.Decimal(38, 6)
  Student   Student  @relation(fields: [StudentID], references: [StudentID])
}
